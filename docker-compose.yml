# A seção principal onde definimos todos os nossos serviços (contêineres)
services:

  # 1. O Serviço de Banco de Dados
  database:
    image: postgres:13-alpine # Usa uma imagem oficial e leve do PostgreSQL
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data # Garante que os dados do banco não se percam ao reiniciar
    ports:
      - "5432:5432" # Mapeia a porta do Postgres para podermos acessá-lo localmente

  # 2. O Serviço da API de Dados (PHP)
  api:
    container_name: data_api
    build:
      context: ./data-api-php # Constrói a imagem usando o Dockerfile na pasta ./data-api-php
    ports:
      - "8000:8000" # Expõe a porta 8000 da API
    environment:
      DB_HOST: database # O host do banco agora é o nome do serviço 'database'
      DB_PORT: ${DB_PORT}
      DB_DATABASE: ${DB_NAME}
      DB_USERNAME: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
    depends_on:
      - database # Garante que o contêiner do banco de dados inicie ANTES da API

  # 3. O Serviço de Scraping (Rust)
  scraper:
    container_name: scraper_service
    build:
      context: ./scraper-service-rust # Constrói a imagem a partir da pasta ./scraper-service-rust
    ports:
      - "8082:8082" # Expõe a porta 8082 do scraper
    environment:
      SCRAPER_API_KEY: ${SCRAPER_API_KEY} # Pega a chave da API do .env principal

  # 4. O Serviço de Notificação (Go)
  notifier:
    container_name: notifier_service
    build:
      context: ./notificador-service-go # Constrói a imagem a partir da pasta ./notificador-service-go
    ports:
      - "8080:8080" # Expõe a porta 8080 do notificador
    environment:
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN} # Pega o token do .env principal

# Define os volumes nomeados que usamos (neste caso, para o banco)
volumes:
  postgres_data:
